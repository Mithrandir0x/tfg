#!/bin/bash
#
###############################################################################################
#
# Project   : Linux Appliance - DeviceServer - Beabloo
#
# Script    : Helper functions for other shell scripts
#
# Author    : Robert Millan
# Date      : 2014-08-20
# Change Log    : 2014-08-20 - Initial version
#       : 2014-08-22 - Override locks with no active process
#                - Accept a parameter to use different locks per script
#       : 2015-06-29 - Add getRunningTime() and formatTime() (based on code from launchETL.sh)
#       : 2015-07-02 - BugFix: Fix syntax error in declaration of getRunningTime() and formatTime()
#
# Copyright (C) 2014 - 2015 Beabloo. All rights reserved.
#
###############################################################################################
#
#

# --------------------------------------------------------------------------------------------
#                                        Variables
# --------------------------------------------------------------------------------------------

GLOBAL_START_TIME=`date +%s`

# --------------------------------------------------------------------------------------------
#                                        Functions
# --------------------------------------------------------------------------------------------

# Attempts to obtain lock, and returns immediately with return value indicating success/failure
tryObtainLock(){
    if [ "$1" ] ; then
        local name="$1"
    else
        local name="$(basename $0)"
    fi
    local lock="/tmp/${name}.lock"

    while ! mkdir $lock ; do
        PID=$(cat $lock/PID)
        ARGS=$(cat $lock/ARGS)
        if [ -e /proc/${PID} ] ; then
            echo "ANOTHER PROCESS (${PID}) IS HOLDING THE LOCK"
            return 1
        else
            echo "OOPS, PROCESS ${PID} DIED AND LEFT $lock BEHIND"
            echo "ARGS OF ${PID}: ${ARGS}"
            rm -rf $lock
            continue
        fi
    done

    # Cleanup when exitting
    trap "rm -rf $lock" 0

    echo "LOCK $lock SUCCESSFULLY OBTAINED BY PROCESS $$"
    echo $$ > $lock/PID
    echo "$@" > $lock/ARGS

    return 0
}

# Persistently attempts to obtain lock, until successful
obtainLock(){
    while ! tryObtainLock "$1" ; do
        sleep 30
    done
}

###############################################################################################

getRunningTime(){
    echo $((`date +%s`-${GLOBAL_START_TIME}))
}

# Formats time in seconds ($1) into a human-readable string
formatTime(){
    GLOBAL_TOTAL_TIME="$1"
    GLOBAL_TIME_STRING=`echo ${GLOBAL_TOTAL_TIME} |awk '{printf "%02d:%02d:%02d",$0/3600,$0%3600/60,$0%60}'`
    if [ ${GLOBAL_TOTAL_TIME} -gt 86400 ] ; then
        DAYS=$((${GLOBAL_TOTAL_TIME} / 86400))
        HOURS=$(((${GLOBAL_TOTAL_TIME} % 86400)/3600))
        TIME_STRING=`echo ${GLOBAL_TIME_STRING} | sed "s/.*:\(.*\):\(.*\)/${DAYS}d:${HOURS}h:\1m:\2s/"`
    else
        TIME_STRING=`echo ${GLOBAL_TIME_STRING} | sed "s/\(.*\):\(.*\):\(.*\)/\1h:\2m:\3s/"`
    fi
    echo "${TIME_STRING}"
}
